{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useForm = (callback, validate) => {\n  _s();\n\n  const [values, setValues] = useState({\n    name: '',\n    email: '',\n    number: '',\n    address: '',\n    password: '',\n    password2: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      let CustDemo = {\n        \"cust_Name\": values.name,\n        \"cust_Address\": values.address,\n        \"cust_PhoneNo\": values.number,\n        \"cust_Password\": values.password2,\n        \"cust_Email_ID\": values.email,\n        \"eMCardNo\": Math.floor((Math.random() + 1) * 1000),\n        \"eMartPoints\": 500\n      };\n      let demo = JSON.stringify(CustDemo);\n      console.log(JSON.parse(demo));\n      fetch(\"http://localhost:8080/eMart/Customer/AddCustomer\", {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: demo\n      }).then(r => {\n        r.json();\n      }).then(res => {\n        if (res) {\n          this.setState({\n            message: 'You have been Registered'\n          });\n        }\n      });\n      callback();\n    }\n  }, [errors]);\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\n_s(useForm, \"jzzDngmwW8em+EtD2qVagC575rQ=\");\n\nexport default useForm;","map":{"version":3,"sources":["F:/Shubham/VITA/Finale_Projects/eMart/Final Project (Reference)/FrontEnd/emart/src/components/section/useForm.js"],"names":["useState","useEffect","useForm","callback","validate","values","setValues","name","email","number","address","password","password2","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","e","value","target","handleSubmit","preventDefault","Object","keys","length","CustDemo","Math","floor","random","demo","JSON","stringify","console","log","parse","fetch","method","headers","body","then","r","json","res","setState","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAGA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAAA;;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AACnCO,IAAAA,IAAI,EAAE,EAD6B;AAEnCC,IAAAA,KAAK,EAAE,EAF4B;AAGnCC,IAAAA,MAAM,EAAC,EAH4B;AAInCC,IAAAA,OAAO,EAAC,EAJ2B;AAKnCC,IAAAA,QAAQ,EAAE,EALyB;AAMnCC,IAAAA,SAAS,EAAE;AANwB,GAAD,CAApC;AAQA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMiB,YAAY,GAAGC,CAAC,IAAI;AACxB,UAAM;AAAEX,MAAAA,IAAF;AAAQY,MAAAA;AAAR,QAAkBD,CAAC,CAACE,MAA1B;AACAd,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,OAACE,IAAD,GAAQY;AAFA,KAAD,CAAT;AAID,GAND;;AAQA,QAAME,YAAY,GAAGH,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACI,cAAF;AAGAR,IAAAA,SAAS,CAACV,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAW,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAND;;AAQAf,EAAAA,SAAS,CACP,MAAM;AACJ,QAAIsB,MAAM,CAACC,IAAP,CAAYX,MAAZ,EAAoBY,MAApB,KAA+B,CAA/B,IAAoCV,YAAxC,EAAsD;AACpD,UAAIW,QAAQ,GAAG;AACb,qBAAYrB,MAAM,CAACE,IADN;AAEb,wBAAeF,MAAM,CAACK,OAFT;AAGb,wBAAeL,MAAM,CAACI,MAHT;AAIb,yBAAgBJ,MAAM,CAACO,SAJV;AAKb,yBAAgBP,MAAM,CAACG,KALV;AAMb,oBAAWmB,IAAI,CAACC,KAAL,CAAW,CAACD,IAAI,CAACE,MAAL,KAAc,CAAf,IAAkB,IAA7B,CANE;AAOb,uBAAc;AAPD,OAAf;AASA,UAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAX;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,KAAL,CAAWL,IAAX,CAAZ;AACAM,MAAAA,KAAK,CAAC,kDAAD,EAAqD;AACxDC,QAAAA,MAAM,EAAE,MADgD;AAExDC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF+C;AAGxDC,QAAAA,IAAI,EAAET;AAHkD,OAArD,CAAL,CAIGU,IAJH,CAIQC,CAAC,IAAI;AAAEA,QAAAA,CAAC,CAACC,IAAF;AAAU,OAJzB,EAI2BF,IAJ3B,CAIgCG,GAAG,IAAI;AACrC,YAAIA,GAAJ,EAAS;AACP,eAAKC,QAAL,CAAc;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAd;AACD;AACF,OARD;AASA1C,MAAAA,QAAQ;AACT;AACF,GAzBM,EA0BP,CAACU,MAAD,CA1BO,CAAT;AA6BA,SAAO;AAAEI,IAAAA,YAAF;AAAgBI,IAAAA,YAAhB;AAA8BhB,IAAAA,MAA9B;AAAsCQ,IAAAA;AAAtC,GAAP;AACD,CA1DD;;GAAMX,O;;AA4DN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({\n    name: '',\n    email: '',\n    number:'',\n    address:'',\n    password: '',\n    password2: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    \n\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(\n    () => {\n      if (Object.keys(errors).length === 0 && isSubmitting) {\n        let CustDemo = {\n          \"cust_Name\":values.name,\n          \"cust_Address\":values.address,\n          \"cust_PhoneNo\":values.number,\n          \"cust_Password\":values.password2,\n          \"cust_Email_ID\":values.email,\n          \"eMCardNo\":Math.floor((Math.random()+1)*1000),\n          \"eMartPoints\":500\n        };\n        let demo = JSON.stringify(CustDemo);\n        console.log(JSON.parse(demo));\n        fetch(\"http://localhost:8080/eMart/Customer/AddCustomer\", {\n          method: 'POST',\n          headers: { 'Content-type': 'application/json' },\n          body: demo\n        }).then(r => { r.json() }).then(res => {\n          if (res) {\n            this.setState({ message: 'You have been Registered' });\n          }\n        });\n        callback();\n      }\n    },\n    [errors]\n  );\n\n  return { handleChange, handleSubmit, values, errors };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}